# ==================================================================================
# DOCKER COMPOSE FOR MARKER3 - FLEXIBLE DEVELOPMENT & PRODUCTION
# ==================================================================================
# Modes: basic → development → secure-dev → dev-open → production
# Docker Desktop compatible networking (uses default bridge + env controls)
# ==================================================================================

version: '3.8'

services:
  # Phase 1: Model Download Service (ONE-TIME SETUP)
  marker-download:
    image: marker3:rtx5090-dev-full
    container_name: marker3-download
    profiles: [download]
    volumes:
      - ./models:/app/models:rw
      - ./data:/app/data:rw
      - ./output:/app/output:rw
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONUNBUFFERED=1
      - HF_HOME=/app/models/.cache
      - HF_HUB_OFFLINE=0  # Allow downloads
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: python scripts/download_models.py
    # Uses Docker Desktop's default network (reliable)

  # Basic Mode: Stable functionality with pre-downloaded models
  marker-basic:
    image: marker3:rtx5090-dev-full
    container_name: marker3-basic
    profiles: [basic]
    volumes:
      - ./models:/app/models:ro  # Pre-downloaded models
      - ./data:/app/data:rw
      - ./output:/app/output:rw
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONUNBUFFERED=1
      - HF_HOME=/app/models/.cache
      - HF_HUB_OFFLINE=1         # Secure - no external model access
      - TRANSFORMERS_OFFLINE=1   # Secure - no external access
      - NETWORK_MODE=restricted
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    ports:
      - "8000:8000"  # API access
    command: python -m marker.scripts.server --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "python", "-c", "import marker; print('Marker ready')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Uses default network - Docker Desktop compatible

  # Development Mode: Live code editing + controlled network access
  marker-dev:
    image: marker3:rtx5090-dev-full
    container_name: marker3-dev
    profiles: [dev, dev-secure]
    volumes:
      - ./models:/app/models:ro
      - ./data:/app/data:rw
      - ./output:/app/output:rw
      # LIVE CODE EDITING - no rebuilds needed
      - ./marker:/app/marker:rw
      - ./scripts:/app/scripts:rw
      - ./pyproject.toml:/app/pyproject.toml:ro
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONUNBUFFERED=1
      - HF_HOME=/app/models/.cache
      - HF_HUB_OFFLINE=1         # Secure by default
      - TRANSFORMERS_OFFLINE=1   # Secure by default
      - NETWORK_MODE=secure-dev
      - PYTHONPATH=/app
      - FASTAPI_RELOAD=true      # Hot reload for development
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    ports:
      - "8000:8000"  # FastAPI/API
      - "8501:8501"  # Streamlit UI
    healthcheck:
      test: ["CMD", "python", "-c", "import marker; print('Dev ready')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development Open Mode: For model updates and package installations
  marker-dev-open:
    image: marker3:rtx5090-dev-full
    container_name: marker3-dev-open
    profiles: [dev-open]
    volumes:
      - ./models:/app/models:rw  # Can update models
      - ./data:/app/data:rw
      - ./output:/app/output:rw
      - ./marker:/app/marker:rw
      - ./scripts:/app/scripts:rw
      - ./pyproject.toml:/app/pyproject.toml:ro
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONUNBUFFERED=1
      - HF_HOME=/app/models/.cache
      - HF_HUB_OFFLINE=0         # Allow model downloads
      - TRANSFORMERS_OFFLINE=0   # Allow external access
      - NETWORK_MODE=open
      - PYTHONPATH=/app
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    ports:
      - "8000:8000"
      - "8501:8501"

  # Production Mode: Maximum security, baked-in code
  marker-production:
    image: marker3:rtx5090-dev-full
    container_name: marker3-production
    profiles: [production]
    volumes:
      - ./models:/app/models:ro  # Read-only models
      - ./data:/app/data:rw
      - ./output:/app/output:rw
      # NO source code mounts - uses baked-in code
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONUNBUFFERED=1
      - HF_HOME=/app/models/.cache
      - HF_HUB_OFFLINE=1         # Maximum security
      - TRANSFORMERS_OFFLINE=1   # Maximum security
      - NETWORK_MODE=production
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    ports:
      - "8000:8000"
    # Maximum security hardening
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=1G
    healthcheck:
      test: ["CMD", "python", "-c", "import marker; print('Production ready')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Docker Desktop Compatible Networking
# Uses default bridge network for maximum compatibility
networks:
  default:
    driver: bridge
    # Docker Desktop's built-in network - most reliable

# Persistent data storage
volumes:
  models:
    driver: local
  data:
    driver: local
  output:
    driver: local
